apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion buildVersions.compileSdkVersion
    defaultConfig {
//        if (!component.isModule.toBoolean()) {
//            applicationId "com.stone.module.pet"
//        }
        minSdkVersion buildVersions.minSdkVersion
        targetSdkVersion buildVersions.targetSdkVersion
        versionCode buildVersions.versionCode
        versionName buildVersions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }

        //resourcePrefix 只能限定Xml资源，并不能限定图片资源，图片资源扔需要自身注意设置前缀名。
        resourcePrefix "mpt_"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

//    sourceSets {
//        main {
//            if (component.isModule.toBoolean()) {
//                manifest.srcFile 'src/main/AndroidManifest.xml'
//            } else {
//                manifest.srcFile 'src/main/component/AndroidManifest.xml'
//                //集成开发模式下排除debug文件夹中的所有Java文件
//                java {
//                    exclude 'component/**'
//                }
//            }
//        }
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation refs.testRunner
    androidTestImplementation refs.espresso
    testImplementation refs.junit

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //不使用 kclass，仅用 kotlin 调用 java 中的反射，可以不需要以下引用
//    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    //If you are using Kotlin, replace annotationProcessor with kapt.
    kapt refs.butterknifeCompiler

    implementation refs.dagger
    kapt refs.daggerCompiler

//    implementation refs.arouter
//    kapt refs.arouterApt

    implementation refs.retrofit
    implementation refs.retrofitConverterScalars
    implementation refs.retrofitConverterGson
    implementation refs.retrofitAdapterRxjava
    implementation refs.retrofitUrlManage

    implementation refs.gson
    implementation refs.fastjson
    implementation refs.okhttp
    implementation refs.okhttpLogInterceptor
    implementation refs.okio

    implementation refs.hdoCircleImageview

//    debugImplementation refs.leakcanary

    implementation refs.androidPickerView
    implementation refs.apvWheelView
    implementation refs.venshineWheelView

    implementation refs.glide
    implementation refs.glideOkhttp
    kapt refs.glideCompiler

    implementation refs.orhLogger

    implementation refs.flycoTabLayout

    implementation refs.bgaqrcodeZxing

    implementation refs.matisse

    implementation refs.androidAutoSize

    implementation refs.glidTransformations

    implementation refs.appJoint

    implementation project(":lib_common")
    implementation project(":lib_router")
    implementation project(":lib_annotations")
//    annotationProcessor project(":lib_compile")
    kapt project(":lib_compile")

}
